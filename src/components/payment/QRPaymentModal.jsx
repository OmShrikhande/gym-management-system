import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { QrCode, Copy, Check, X, Loader2 } from "lucide-react";
import { toast } from "sonner";

/**
 * QR Payment Modal Component
 * Displays a QR code for payment and handles payment verification
 */
const QRPaymentModal = ({ 
  isOpen, 
  onClose, 
  onPaymentComplete, 
  memberData, 
  paymentAmount,
  paymentDescription = "Gym Membership Fee"
}) => {
  const [copied, setCopied] = useState(false);
  const [paymentVerified, setPaymentVerified] = useState(false);
  const [verifying, setVerifying] = useState(false);
  const [paymentId, setPaymentId] = useState("");
  const [qrImageUrl, setQrImageUrl] = useState("");
  const [upiId] = useState("gymflow@upi");
  
  // Generate a dummy QR code URL (in a real app, this would be generated by the backend)
  useEffect(() => {
    // This is a placeholder. In a real app, you would generate a QR code for the specific payment
    // or fetch it from your backend
    const amount = typeof paymentAmount === 'number' ? paymentAmount.toFixed(2) : paymentAmount;
    setQrImageUrl("https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=upi://pay?pa=" + 
      encodeURIComponent(upiId) + 
      "&pn=GymFlow&am=" + 
      amount + 
      "&tn=" + 
      encodeURIComponent(paymentDescription));
  }, [upiId, paymentAmount, paymentDescription]);
  
  // Copy UPI ID to clipboard
  const handleCopyUpiId = () => {
    navigator.clipboard.writeText(upiId);
    setCopied(true);
    toast.success("UPI ID copied to clipboard");
    
    // Reset copied state after 3 seconds
    setTimeout(() => {
      setCopied(false);
    }, 3000);
  };
  
  // Verify payment (in a real app, this would call your backend API)
  const handleVerifyPayment = async () => {
    if (!paymentId.trim()) {
      toast.error("Please enter the payment reference ID");
      return;
    }
    
    setVerifying(true);
    
    try {
      // Simulate API call with a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // In a real app, you would verify the payment with your backend
      // For demo purposes, we'll just simulate a successful verification
      setPaymentVerified(true);
      toast.success("Payment verified successfully!");
      
      // Call the onPaymentComplete callback after a short delay
      setTimeout(() => {
        onPaymentComplete({
          paymentId,
          amount: paymentAmount,
          status: "completed",
          timestamp: new Date().toISOString()
        });
      }, 1000);
    } catch (error) {
      console.error("Payment verification error:", error);
      toast.error("Failed to verify payment. Please try again.");
    } finally {
      setVerifying(false);
    }
  };
  
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md bg-gray-800 border-gray-700">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="text-white">Complete Payment</CardTitle>
            <CardDescription className="text-gray-400">
              Scan QR code or use UPI ID to pay
            </CardDescription>
          </div>
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={onClose}
            className="text-gray-400 hover:text-white"
            disabled={verifying}
          >
            <X className="h-5 w-5" />
          </Button>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Payment Details */}
          <div className="bg-gray-700/50 p-4 rounded-lg">
            <h4 className="text-white font-medium mb-3">Payment Breakdown</h4>
            
            {/* Show payment breakdown if available */}
            {memberData?.paymentBreakdown ? (
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-300">Plan:</span>
                  <span className="text-white">{memberData.paymentBreakdown.planName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Plan Price:</span>
                  <span className="text-white">₹{memberData.paymentBreakdown.planPrice}/{memberData.paymentBreakdown.planDuration}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Duration:</span>
                  <span className="text-white">
                    {memberData.paymentBreakdown.selectedDuration === 1 ? '1 Month' :
                     memberData.paymentBreakdown.selectedDuration < 12 ? `${memberData.paymentBreakdown.selectedDuration} Months` :
                     memberData.paymentBreakdown.selectedDuration === 12 ? '1 Year' :
                     memberData.paymentBreakdown.selectedDuration === 24 ? '2 Years' :
                     memberData.paymentBreakdown.selectedDuration === 36 ? '3 Years' :
                     memberData.paymentBreakdown.selectedDuration % 12 === 0 ? `${memberData.paymentBreakdown.selectedDuration / 12} Year${memberData.paymentBreakdown.selectedDuration / 12 > 1 ? 's' : ''}` :
                     `${memberData.paymentBreakdown.selectedDuration} Months`}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Plan Cost:</span>
                  <span className="text-white">₹{memberData.paymentBreakdown.planCost}</span>
                </div>
                {memberData.paymentBreakdown.trainerCost > 0 && (
                  <div className="flex justify-between">
                    <span className="text-gray-300">Trainer Cost:</span>
                    <span className="text-white">₹{memberData.paymentBreakdown.trainerCost}</span>
                  </div>
                )}
                <div className="border-t border-gray-600 pt-2 mt-2">
                  <div className="flex justify-between font-medium">
                    <span className="text-gray-300">Total Amount:</span>
                    <span className="text-white">₹{memberData.paymentBreakdown.totalAmount}</span>
                  </div>
                </div>
              </div>
            ) : (
              // Fallback if no breakdown is available
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-300">Amount:</span>
                  <span className="text-white font-medium">₹{paymentAmount}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Description:</span>
                  <span className="text-white">{paymentDescription}</span>
                </div>
              </div>
            )}
          </div>
          
          {/* QR Code */}
          <div className="flex flex-col items-center">
            <div className="bg-white p-4 rounded-lg mb-4">
              {qrImageUrl ? (
                <img 
                  src={qrImageUrl} 
                  alt="Payment QR Code" 
                  className="w-48 h-48"
                />
              ) : (
                <div className="w-48 h-48 flex items-center justify-center">
                  <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-2 bg-gray-700/50 p-2 rounded-lg w-full">
              <QrCode className="h-5 w-5 text-gray-400" />
              <span className="text-white flex-1 truncate">{upiId}</span>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleCopyUpiId}
                className="text-gray-300 hover:text-white"
              >
                {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          {/* Payment Verification */}
          <div className="space-y-3">
            <Label htmlFor="paymentId" className="text-gray-300">
              Enter Payment Reference ID
            </Label>
            <Input
              id="paymentId"
              placeholder="e.g. UPI123456789"
              value={paymentId}
              onChange={(e) => setPaymentId(e.target.value)}
              className="bg-gray-700 border-gray-600 text-white"
              disabled={paymentVerified || verifying}
            />
            <p className="text-xs text-gray-400">
              After completing the payment, enter the reference ID from your UPI app
            </p>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-3">
          <div className="flex gap-2 w-full">
            <Button 
              className="flex-1 bg-blue-600 hover:bg-blue-700"
              onClick={handleVerifyPayment}
              disabled={paymentVerified || verifying || !paymentId.trim()}
            >
              {verifying ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Verifying...
                </>
              ) : paymentVerified ? (
                <>
                  <Check className="h-4 w-4 mr-2" />
                  Payment Verified
                </>
              ) : (
                "Verify Payment"
              )}
            </Button>
            
            {/* Skip Payment Button for Testing */}
            <Button 
              className="bg-amber-600 hover:bg-amber-700"
              onClick={() => {
                // Generate a test payment ID
                const testPaymentId = "TEST-" + Math.floor(100000 + Math.random() * 900000);
                
                // Call the onPaymentComplete callback with test data
                onPaymentComplete({
                  paymentId: testPaymentId,
                  amount: paymentAmount,
                  status: "completed",
                  timestamp: new Date().toISOString()
                });
                
                toast.success("Test payment processed");
              }}
              disabled={paymentVerified || verifying}
            >
              Skip Payment (Test)
            </Button>
          </div>
          
          <p className="text-xs text-gray-400 text-center">
            Please complete the payment before verifying. Your membership will be activated after payment verification.
            <br />
            <span className="text-amber-400">For testing: Use the "Skip Payment" button to bypass actual payment.</span>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
};

export default QRPaymentModal;